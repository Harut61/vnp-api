# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    Endpoints\:
        resource: '../src/VneUtil/Endpoints/*'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/VneUtil/'
    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Services\Vne\:
        resource: '../src/Services/Vne/'
        tags: ['controller.service_arguments']
        public: true
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    gedmo.listener.softdeleteable:
        class: Gedmo\SoftDeleteable\SoftDeleteableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    gesdinet.jwtrefreshtoken.refresh_token_manager:
        class: App\Doctrine\RefreshTokenManager
        public: true
        arguments: [ '@doctrine.orm.default_entity_manager', 'Gesdinet\JWTRefreshTokenBundle\Entity\RefreshToken']

    acme_api.event.authentication_success_listener:
        class: App\EventListener\AuthenticationSuccessListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse,  priority: -1 }
        autowire: true
        autoconfigure: false

    App\EventListener\ApiExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    vnp_api.event.jwt_lexik_listener:
        class: App\EventListener\JWTLexikListener
        arguments: [ '@request_stack' , '@doctrine.orm.entity_manager']
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_decoded, method: onJWTDecoded }


#    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
#        arguments:
#            - '%env(DATABASE_URL)%'
#            - { db_table: 'customer_session', db_id_col: 'guid' }
#        lazy: true

    app.jwt_token_authenticator:
        class: App\Security\Guard\JWTTokenAuthenticator
        parent: lexik_jwt_authentication.security.guard.jwt_token_authenticator
        autowire: true
        autoconfigure: false
        public: false

    dh_doctrine_audit.event_subscriber.create_schema:
      class: App\EventListener\AuditCreateSchemaListener
      arguments: ["@dh_doctrine_audit.manager", "@dh_doctrine_audit.reader"]
      tags:
        - { name: doctrine.event_subscriber, connection: default }

    app.doctrine.filter.configurator:
        class: App\Filter\Configurator
        arguments:
            - "@doctrine.orm.entity_manager"
            - "@security.token_storage"
            - "@annotation_reader"
        tags:
            - { name: kernel.event_listener, event: kernel.request   }
    Redis:
        # you can also use \RedisArray, \RedisCluster or \Predis\Client classes
        class: Redis
        calls:
            - connect:
                - '%env(REDIS_HOST)%'
                - '%env(int:REDIS_PORT)%'
            # uncomment the following if your Redis server requires a password
            #- auth:
            #    - '%env(REDIS_PASSWORD)%'
    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@Redis'
    App\EventListener\DeletedAtFilterConfigurator:
        tags:
            - { name: kernel.event_listener, event: kernel.request , priority: 7 }
        # Autoconfiguration must be disabled to set a custom priority
        autoconfigure: false

    App\EventListener\UsersFilterConfigurator:
        tags:
            - { name: kernel.event_listener, event: kernel.request }
        # Autoconfiguration must be disabled to set a custom priority
        autoconfigure: false

    App\EventListener\FindInSetFilterConfigurator:
        tags:
            - { name: kernel.event_listener, event: kernel.request}
        # Autoconfiguration must be disabled to set a custom priority
        autoconfigure: false

    Predis\Client: '@snc_redis.default'
    Predis\ClientInterface: '@Predis\Client'

    Aws\Sdk: ~

    App\Util\AwsSqsUtil:
        arguments:
            $applicationName: '%env(APP_NAME)%'
            $env: '%env(IVN_ENV)%'
        calls:
            - [createClient, ['%env(AWS_SQS_ACCESS_KEY)%', '%env(AWS_SQS_SECRET_KEY)%', '%env(AWS_SQS_REGION)%', '%env(AWS_SDK_VERSION)%']]


    App\Util\B2Util:
        arguments:
            $accountId: '%env(B2_MASTER_ACCESS_KEY)%'
            $applicationKey: '%env(B2_MASTER_SECRET_KEY)%'

    ivn_file_store.s3_client:
            class: Aws\S3\S3Client
            factory: [Aws\S3\S3Client, 'factory']
            arguments:
                -
                    version: "latest"
                    region: "%env(WASABI_REGION)%"
                    endpoint: "%env(WASABI_ENTRYPOINT)%"
                    s3BucketEndpoint: true
                    use_path_style_endpoint: true
                    credentials:
                        key: '%env(WASABI_ACCESS_KEY)%'
                        secret: '%env(WASABI_SECRET_KEY)%'

    App\Message\Consumer\Consumer:
        arguments: [!tagged consumer_strategy]

    App\Message\Consumer\Strategy\ImageStrategy:
        tags:
            - { name: consumer_strategy }

    App\Message\Consumer\Strategy\FileStrategy:
        tags:
            - { name: consumer_strategy }

    App\Message\Consumer\Strategy\VodTranscoderStrategy:
        tags:
            - { name: consumer_strategy }

    App\Message\Consumer\Strategy\VodMediaInfoStrategy:
        tags:
            - { name: consumer_strategy }

    App\Message\Consumer\Strategy\SourceVideoDeleteStrategy:
        tags:
            - { name: consumer_strategy }

    App\Message\Consumer\Strategy\VneIntegrationStrategy:
        tags:
            - { name: consumer_strategy }

    App\Message\Consumer\Strategy\IvnewsVneBulkIntegrationStrategy:
        tags:
            - { name: consumer_strategy }

    App\Message\Consumer\Strategy\CommentStrategy:
        tags:
            - { name: consumer_strategy }

    App\EventSubscriber\CreatedByDoctrineSubscriber:
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    app.doctrine.orm.null_filter:
        class: App\Filter\NullFilter
        arguments:
            - "@doctrine"
            - "@request_stack"
            - "@logger"

    app.doctrine.orm.soft_deleted_at_filter:
        class: App\Filter\SoftDeletedAtFilter
        arguments:
            - "@doctrine"
            - "@request_stack"
            - "@logger"

    App\EventListener\CacheRequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request , priority: 5 }

    App\EventListener\CacheResponseListener:
        tags:
            - { name: kernel.event_listener, event: kernel.response, priority: 0 }