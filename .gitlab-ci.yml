image: docker:19.03.0

variables:
  REGISTRY_URL: "224366161563.dkr.ecr.us-east-1.amazonaws.com"
  NGINX_COMPONENT_NAME: "vnp-api-nginx"
  SUPERVISOR_COMPONENT_NAME: "vnp-api-supervisor"
  VARNISH_COMPONENT_NAME: "vnp-api-varnish"
  COMPONENT_NAME: "vnp-api"
  AWS_REGION: "us-east-1"
  PLATFORM: "vnp"
  VAR_BUCKET: "ivnews-non-prod-vars"

services:
  - docker:19.03.0-dind

stages:
  - test
  - build-push
  - deploy

.common_before_script: &common_before_script |
  apk add --no-cache curl jq python py-pip gcc python3-dev python2-dev musl-dev &&
  pip install awscli &&
  export APP_IMAGE_TAG="${CI_COMMIT_BRANCH}_$(echo $CI_COMMIT_SHA | head -c 8)" &&
  export COMPONENT_IMAGE_NAME="$REGISTRY_URL/$COMPONENT_NAME" &&
  export NGINX_IMAGE_NAME="$REGISTRY_URL/$NGINX_COMPONENT_NAME" &&
  export SUPERVISOR_IMAGE_NAME="$REGISTRY_URL/$SUPERVISOR_COMPONENT_NAME" &&
  export VARNISH_IMAGE_NAME="$REGISTRY_URL/$VARNISH_COMPONENT_NAME" &&
  export COMPONENT_IMAGE_NAME_WITH_TAG="$COMPONENT_IMAGE_NAME:$APP_IMAGE_TAG" &&
  export NGINX_IMAGE_NAME_WITH_TAG="$NGINX_IMAGE_NAME:$APP_IMAGE_TAG" &&
  export SUPERVISOR_IMAGE_NAME_WITH_TAG="$SUPERVISOR_IMAGE_NAME:$APP_IMAGE_TAG" &&
  export VARNISH_IMAGE_NAME_WITH_TAG="$VARNISH_IMAGE_NAME:$APP_IMAGE_TAG" &&
  export COMPONENT_IMAGE_NAME_LATEST_TAG="$COMPONENT_IMAGE_NAME:${CI_COMMIT_BRANCH}_latest" &&
  export NGINX_IMAGE_NAME_LATEST_TAG="$NGINX_IMAGE_NAME:${CI_COMMIT_BRANCH}_latest"
  export SUPERVISOR_IMAGE_NAME_LATEST_TAG="$SUPERVISOR_IMAGE_NAME:${CI_COMMIT_BRANCH}_latest"
  export VARNISH_IMAGE_NAME_LATEST_TAG="$VARNISH_IMAGE_NAME:${CI_COMMIT_BRANCH}_latest"

.install_helm: &install_helm $CI_PROJECT_DIR/devops-helm/install-helm.sh v3.3.4
.install_git: &install_git apk add --no-cache git
.update_helm_submodule: &update_helm_submodule git submodule sync --recursive && git submodule update --recursive --remote

before_script:
  - *common_before_script
  - $(aws ecr get-login --no-include-email --region "${AWS_REGION}")

test vnp-api:
  stage: test
  image: rca2gghkb4crs3/php:7.4
  cache:
    paths:
      - vendor/
  services:
    - mysql:5.7
    - redis:latest
  variables:
    # Configure mysql environment variables (https://hub.docker.com/r/_/mysql/)
    MYSQL_DATABASE: vnp_api_api_ci
    MYSQL_ROOT_PASSWORD: admin
    APP_ENV: test
    IVN_ENV: test
    DATABASE_HOST: mysql
    DATABASE_PORT: 3306
    DATABASE_NAME: vnp_api_api_ci
    DATABASE_USERNAME: root
    DATABASE_PASSWORD: admin
    DATABASE_SERVER_VERSION: '5.7'
    PHP_UNIT_TEST_RESULTS: /tmp/reports/phpunit
    CONTAINER_REGISTRY_BASE: quay.io/api-platform
    CORS_ALLOW_ORIGIN: ^https?://localhost(:[0-9]+)?$
    REDIS_URL: redis://redis:6379
    JWT_VERSION: 2
    JWT_SECRET_KEY: private.pem
    JWT_PUBLIC_KEY: public.pem
    JWT_PASSPHRASE: gitlab-ci
    APPLICATION: vnp_api
    SWIFT_TRANSPORT: smtp
    SWIFT_USERNAME: demo
    SWIFT_PASSWORD: demo
    SWIFT_HOST: gmail.com
    SWIFT_PORT: 587
    SWIFT_ENCRYPTION: tls
    UUI_ENTRYPOINT: http://localhost
    API_ENTRYPOINT: http://localhost
    FROM_EMAIL: team@ivnews.com
    AWS_SQS_ACCESS_KEY: AKIATIPKD52NZ7DHDEMO
    AWS_SQS_SECRET_KEY: l3qmdsdjz0la536yJg2ZSWulu+L1NXdRSrG3DEMO
    AWS_SQS_REGION: us-east-1
    AWS_SDK_VERSION: "2012-11-05"
    VOD_REDIS_KEY_PREFIX: "vod:upload.ivnews.com:"
    AWS_MEDIA_INFO_SQS_QUEUE_NAME: vod-mediainfo
    AWS_MEDIA_INFO_SQS_QUEUE_TYPE: standard
    AWS_TRANSCODING_SQS_QUEUE_NAME: vod-transcoder
    AWS_TRANSCODING_SQS_QUEUE_TYPE: standard
    ADMIN_ALERT_EMAIL: nishant@ivnews.com
    AWS_S3_ACCESS_KEY: AKIATIPKD52NQFISDEMO
    AWS_S3_SECRET_KEY: "ixAnDhSobWlvnf2hrOdr2Urdu4uz20/jggnCDEMO"
    AWS_S3_TRANSCODING_OUTPUT_BUCKET: transcoding
    AWS_MEDIA_CONVERTER_VERSION: "2017-08-29"
    AWS_MEDIA_CONVERTER_REGION: "us-east-1"
    AWS_MEDIA_CONVERTER_ACCESS_KEY: "AKIATIPKD52NZM7P7EI4"
    AWS_MEDIA_CONVERTER_SECRET_KEY: "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"
    AWS_MEDIA_CONVERTER_ENDPOINT: "https://lxlxpswfb.mediaconvert.us-east-1.amazonaws.com"
    AWS_MEDIA_CONVERTER_IAM: "arn:aws:iam::224366161563:role/media-convert-dev-role"
    AWS_MEDIA_CONVERTER_BILLING_TAG: "media-convert"
    SENTRY_DSN: "https://a4204277170140dda79e84918f1bbf73@o451518.ingest.sentry.io/5566591"
    B2_ENTRYPOINT: https://s3.us-west-000.backblazeb2.com
    B2_REGION: us-west-002
    B2_ACCESS_KEY: 000f4eff7DL7c001000DEMO
    B2_SECRET_KEY: 000f4effDQ7c001000DEMO
    B2_MASTER_ACCESS_KEY: 000f4effDEMODc001000DEMO
    B2_MASTER_SECRET_KEY: 000f4effDEMODc001000DEMO
    B2_ACL: public-read
    B2_VOD_UPLOAD_BUCKET: upload-vod
    PRE_SIGNED_EXP_TIME: 240
    REDIS_HOST: redis
    REDIS_PORT: 6379
    REDIS_PASSWORD: ""  
  before_script:
    # Install and run Composer
    - php composer.phar install --no-scripts
  script:
    - php composer.phar run-script behat

build vnp-api:
  only:
    - develop
    - master
  stage: build-push
  script:
    - docker pull $COMPONENT_IMAGE_NAME_LATEST_TAG || true
    - docker build --target app --cache-from $COMPONENT_IMAGE_NAME_LATEST_TAG -f Dockerfile-api -t $COMPONENT_IMAGE_NAME_WITH_TAG .
    - docker tag $COMPONENT_IMAGE_NAME_WITH_TAG $COMPONENT_IMAGE_NAME_LATEST_TAG
    - docker push $COMPONENT_IMAGE_NAME_WITH_TAG
    - docker push $COMPONENT_IMAGE_NAME_LATEST_TAG

build vnp-api nginx:
  only:
    - develop
    - master
  stage: build-push
  script:
    - docker pull $NGINX_IMAGE_NAME_LATEST_TAG || true
    - docker build --cache-from $NGINX_IMAGE_NAME_LATEST_TAG -f Dockerfile-nginx --build-arg hostname=127.0.0.1 -t $NGINX_IMAGE_NAME_WITH_TAG .
    - docker tag $NGINX_IMAGE_NAME_WITH_TAG $NGINX_IMAGE_NAME_LATEST_TAG
    - docker push $NGINX_IMAGE_NAME_WITH_TAG
    - docker push $NGINX_IMAGE_NAME_LATEST_TAG

build vnp-api supervisor:
  only:
    - develop
    - master
  stage: build-push
  script:
    - docker pull $SUPERVISOR_IMAGE_NAME_LATEST_TAG || true
    - docker build --cache-from $SUPERVISOR_IMAGE_NAME_LATEST_TAG -f Dockerfile-supervisor -t $SUPERVISOR_IMAGE_NAME_WITH_TAG .
    - docker tag $SUPERVISOR_IMAGE_NAME_WITH_TAG $SUPERVISOR_IMAGE_NAME_LATEST_TAG
    - docker push $SUPERVISOR_IMAGE_NAME_WITH_TAG
    - docker push $SUPERVISOR_IMAGE_NAME_LATEST_TAG

build vnp-api varnish:
  only:
    - develop
    - master
  stage: build-push
  script:
    - docker pull $VARNISH_IMAGE_NAME_LATEST_TAG || true
    - docker build --cache-from $VARNISH_IMAGE_NAME_LATEST_TAG -f Dockerfile-varnish -t $VARNISH_IMAGE_NAME_WITH_TAG .
    - docker tag $VARNISH_IMAGE_NAME_WITH_TAG $VARNISH_IMAGE_NAME_LATEST_TAG
    - docker push $VARNISH_IMAGE_NAME_WITH_TAG
    - docker push $VARNISH_IMAGE_NAME_LATEST_TAG

deploy vnp-api dev:
  only:
    - develop
  stage: deploy
  variables:
    GIT_SUBMODULE_STRATEGY: "recursive"
    NAMESPACE: "dev"
  before_script:
    - *common_before_script
    - *install_git
    - *update_helm_submodule
    - *install_helm
  script:
    - $CI_PROJECT_DIR/devops-helm/deploy-vnp-api.sh

deploy vnp-api test:
  stage: deploy
  only:
    - master
  before_script:
    - *common_before_script
    - *install_git
    - *update_helm_submodule
    - *install_helm
  variables:
    GIT_SUBMODULE_STRATEGY: "recursive"
    NAMESPACE: "test"
  script:
    - $CI_PROJECT_DIR/devops-helm/deploy-vnp-api.sh

deploy vnp-api production:
  stage: deploy
  only:
    - master
  when: manual
  variables:
    GIT_SUBMODULE_STRATEGY: "recursive"
    NAMESPACE: "prod"
    VAR_BUCKET: "ivnews-prod-vars"
  before_script:
    - *common_before_script
    - *install_git
    - *update_helm_submodule
    - *install_helm
  script:
    - $CI_PROJECT_DIR/devops-helm/deploy-vnp-api.sh
